//
//  SMGAssignmentMocks.generated.swift
//  SMGAssignment
//
//  Generated by Mockingbird v0.20.0.
//  DO NOT EDIT
//

#if !(os(macOS))
import UIKit
#endif
#if os(macOS)
import AppKit
#endif
@testable import Mockingbird
@testable import SMGAssignment
import ACarousel
import BetterCodable
import Combine
import Foundation
import Swift
import SwiftUI
import UIKit

private let mkbGenericStaticMockContext = Mockingbird.GenericStaticMockContext()

// MARK: - Mocked ListingServiceProtocol
public final class ListingServiceProtocolMock: SMGAssignment.ListingServiceProtocol, Mockingbird.Mock {
  typealias MockingbirdSupertype = SMGAssignment.ListingServiceProtocol
  public static let mockingbirdContext = Mockingbird.Context()
  public let mockingbirdContext = Mockingbird.Context(["generator_version": "0.20.0", "module_name": "SMGAssignment"])

  fileprivate init(sourceLocation: Mockingbird.SourceLocation) {
    self.mockingbirdContext.sourceLocation = sourceLocation
    ListingServiceProtocolMock.mockingbirdContext.sourceLocation = sourceLocation
  }

  // MARK: Mocked `getListings`()
  public func `getListings`() -> AnyPublisher<SMGAssignment.ListingResponse, Error> {
    return self.mockingbirdContext.mocking.didInvoke(Mockingbird.SwiftInvocation(selectorName: "`getListings`() -> AnyPublisher<SMGAssignment.ListingResponse, Error>", selectorType: Mockingbird.SelectorType.method, arguments: [], returnType: Swift.ObjectIdentifier((AnyPublisher<SMGAssignment.ListingResponse, Error>).self))) {
      self.mockingbirdContext.recordInvocation($0)
      let mkbImpl = self.mockingbirdContext.stubbing.implementation(for: $0)
      if let mkbImpl = mkbImpl as? () -> AnyPublisher<SMGAssignment.ListingResponse, Error> { return mkbImpl() }
      for mkbTargetBox in self.mockingbirdContext.proxy.targets(for: $0) {
        switch mkbTargetBox.target {
        case .super:
          break
        case .object(let mkbObject):
          guard var mkbObject = mkbObject as? MockingbirdSupertype else { break }
          let mkbValue: AnyPublisher<SMGAssignment.ListingResponse, Error> = mkbObject.`getListings`()
          self.mockingbirdContext.proxy.updateTarget(&mkbObject, in: mkbTargetBox)
          return mkbValue
        }
      }
      if let mkbValue = self.mockingbirdContext.stubbing.defaultValueProvider.value.provideValue(for: (AnyPublisher<SMGAssignment.ListingResponse, Error>).self) { return mkbValue }
      self.mockingbirdContext.stubbing.failTest(for: $0, at: self.mockingbirdContext.sourceLocation)
    }
  }

  public func `getListings`() -> Mockingbird.Mockable<Mockingbird.FunctionDeclaration, () -> AnyPublisher<SMGAssignment.ListingResponse, Error>, AnyPublisher<SMGAssignment.ListingResponse, Error>> {
    return Mockingbird.Mockable<Mockingbird.FunctionDeclaration, () -> AnyPublisher<SMGAssignment.ListingResponse, Error>, AnyPublisher<SMGAssignment.ListingResponse, Error>>(context: self.mockingbirdContext, invocation: Mockingbird.SwiftInvocation(selectorName: "`getListings`() -> AnyPublisher<SMGAssignment.ListingResponse, Error>", selectorType: Mockingbird.SelectorType.method, arguments: [], returnType: Swift.ObjectIdentifier((AnyPublisher<SMGAssignment.ListingResponse, Error>).self)))
  }

  // MARK: Mocked `getListings`()
  public func `getListings`() async throws -> SMGAssignment.ListingResponse {
    return try await self.mockingbirdContext.mocking.didInvoke(Mockingbird.SwiftInvocation(selectorName: "`getListings`() async throws -> SMGAssignment.ListingResponse", selectorType: Mockingbird.SelectorType.method, arguments: [], returnType: Swift.ObjectIdentifier((SMGAssignment.ListingResponse).self))) {
      self.mockingbirdContext.recordInvocation($0)
      let mkbImpl = self.mockingbirdContext.stubbing.implementation(for: $0)
      if let mkbImpl = mkbImpl as? () async throws -> SMGAssignment.ListingResponse { return try await mkbImpl() }
      for mkbTargetBox in self.mockingbirdContext.proxy.targets(for: $0) {
        switch mkbTargetBox.target {
        case .super:
          break
        case .object(let mkbObject):
          guard var mkbObject = mkbObject as? MockingbirdSupertype else { break }
          let mkbValue: SMGAssignment.ListingResponse = try await mkbObject.`getListings`()
          self.mockingbirdContext.proxy.updateTarget(&mkbObject, in: mkbTargetBox)
          return mkbValue
        }
      }
      if let mkbValue = self.mockingbirdContext.stubbing.defaultValueProvider.value.provideValue(for: (SMGAssignment.ListingResponse).self) { return mkbValue }
      self.mockingbirdContext.stubbing.failTest(for: $0, at: self.mockingbirdContext.sourceLocation)
    }
  }

  public func `getListings`() async -> Mockingbird.Mockable<Mockingbird.ThrowingAsyncFunctionDeclaration, () async throws -> SMGAssignment.ListingResponse, SMGAssignment.ListingResponse> {
    return Mockingbird.Mockable<Mockingbird.ThrowingAsyncFunctionDeclaration, () async throws -> SMGAssignment.ListingResponse, SMGAssignment.ListingResponse>(context: self.mockingbirdContext, invocation: Mockingbird.SwiftInvocation(selectorName: "`getListings`() async throws -> SMGAssignment.ListingResponse", selectorType: Mockingbird.SelectorType.method, arguments: [], returnType: Swift.ObjectIdentifier((SMGAssignment.ListingResponse).self)))
  }
}

/// Returns a concrete mock of `ListingServiceProtocol`.
public func mock(_ type: SMGAssignment.ListingServiceProtocol.Protocol, file: StaticString = #file, line: UInt = #line) -> ListingServiceProtocolMock {
  return ListingServiceProtocolMock(sourceLocation: Mockingbird.SourceLocation(file, line))
}
